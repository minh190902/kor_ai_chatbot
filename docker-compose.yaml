services:
  # FastAPI Service
  fastapi:
    container_name: fastapi
    build:
      context: ./ai_core
      dockerfile: docker/Dockerfile
    command: sh -c "sleep 5 && python -m db.create_tables && uvicorn api:api --host 0.0.0.0 --port 8080 --reload"
    ports:
      - "${FASTAPI_PORT:-8080}:8080"
    volumes:
      - .:/app
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - ${NETWORK_NAME}
  
  db:
    container_name: postgres
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_DATA: ${POSTGRES_DATA:-/var/lib/postgresql/data/pgdata}
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    env_file:
      - .env
    volumes:
      - ./volumes/db/data:/var/lib/postgresql/data
    command: >
      postgres -c 'max_connections=${POSTGRES_MAX_CONNECTIONS:-100}'
               -c 'shared_buffers=${POSTGRES_SHARED_BUFFERS:-128MB}'
               -c 'work_mem=${POSTGRES_WORK_MEM:-4MB}'
               -c 'maintenance_work_mem=${POSTGRES_MAINTENANCE_WORK_MEM:-64MB}'
               -c 'effective_cache_size=${POSTGRES_EFFECTIVE_CACHE_SIZE:-4096MB}'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fiktech -d ai_chatbot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ${NETWORK_NAME}

  db-backup:
    image: prodrigestivill/postgres-backup-local
    container_name: db-backup
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_EXTRA_OPTS=--schema=public --blobs
      - SCHEDULE=@daily
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
      - BACKUP_DIR=/backups
    volumes:
      - ./volumes/db/backups:/backups
    depends_on:
      - db
    networks:
      - ${NETWORK_NAME}
  
  backend:
    container_name: be
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env
    ports:
      - "8000:8000"
    depends_on:
      - db
      - fastapi
    networks:
      - ${NETWORK_NAME}

  frontend:
    container_name: fe
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - ${NETWORK_NAME}

networks:
  kor-learning:
    driver: bridge
services:
  # FastAPI Service
  fastapi:
    container_name: fastapi
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: sh -c "sleep 5 && python -m uvicorn api:api --host 0.0.0.0 --port 8080 --reload"
    ports:
      - "${FASTAPI_PORT:-8080}:8080"
    volumes:
      - .:/app
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - ${NETWORK_NAME}
  
  # db:
  #   container_name: postgres
  #   image: postgres:15-alpine
  #   restart: always
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: ${POSTGRES_DB}
  #     POSTGRES_DATA: ${POSTGRES_DATA:-/var/lib/postgresql/data/pgdata}
  #   ports:
  #     - "${POSTGRES_PORT:-5432}:5432"
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./volumes/db/data:/var/lib/postgresql/data
  #   command: >
  #     postgres -c 'max_connections=${POSTGRES_MAX_CONNECTIONS:-100}'
  #              -c 'shared_buffers=${POSTGRES_SHARED_BUFFERS:-128MB}'
  #              -c 'work_mem=${POSTGRES_WORK_MEM:-4MB}'
  #              -c 'maintenance_work_mem=${POSTGRES_MAINTENANCE_WORK_MEM:-64MB}'
  #              -c 'effective_cache_size=${POSTGRES_EFFECTIVE_CACHE_SIZE:-4096MB}'
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U fiktech -d ai_chatbot"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - ${NETWORK_NAME}

networks:
  kor-learning:
    driver: bridge